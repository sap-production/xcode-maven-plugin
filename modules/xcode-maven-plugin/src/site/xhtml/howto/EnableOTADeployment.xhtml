<!--
  #%L
  Xcode Maven Plugin
  %%
  Copyright (C) 2012 SAP AG
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>How to enable Over-The-Air Deployment</title>
<script type="text/javascript" src="http://code.jquery.com/jquery-1.4.2.min.js"></script>
<script type="text/javascript" src="../js/lightbox_me/jquery.lightbox_me.js"></script>
<script type="text/javascript" src="../js/image_lightbox.js"></script>
<link rel="stylesheet" type="text/css" href="../css/boxes.css"/>
</head>

<body>

	<h1>How to enable Over-The-Air Deployment</h1>

	<p>
	This is a step-by-step guide, describing how the Xcode-Maven-Plugin can support Over-The-Air (OTA) Deployment.<br/>
	In <a href="http://help.apple.com/iosdeployment-apps">Apples Documentation</a> you find more information about 
	<a href="http://help.apple.com/iosdeployment-apps/mac/1.1/#app43ad871e">Over-The-Air Deployment</a> in general.
	</p>
	
	<h2>Introduction</h2>
	
	<p>
	Besides the Xcode-Maven-Plugin we provide an <a href="http://github.com/sap-production/OTAService">OTA Service</a> 
	(detailed information can be found on the project page).<br/>
	This service is able to generate on-the-fly an install html page (henceforth referred to as <tt>install page</tt>) and 
	the manifest plist file (<tt>manifest plist</tt>) needed for OTA deployment, based on the provided parameters and the referer.
	The Xcode-Maven-Plugin during the build generates an html page (henceforth referred to as <tt>iframe page</tt>) containing 
	an iframe being populated with the 'install page' generated by the specified OTA service.
	</p>
	
	<p>
	By providing the IPA file and the 'iframe page', generated during the build, next to eachother on a web server users can access the 'iframe page' using their devices.
	For users it is transparent that the OTA service generates the 'install page' on the fly. By clicking the "install" button and confirming the dialog the App will be installed on the device.
	</p>
	
	<h2>Xcode-Maven-Plugin build configuration</h2>
	<p>
	<b>Prerequisite</b><br/>
	You already have an OTA Service deployed and running. The next chapter describes an example how to achieve this.
	</p>
	
	<p>
	To enable the generation of the 'iframe page' you have to specify the 
	<a href="http://sap-production.github.io/xcode-maven-plugin/site/generate-ota-html-mojo.html#miosOtaServiceUrl">"HTML" OTA Service URL</a> (used by the
	<a href="http://sap-production.github.io/xcode-maven-plugin/site/generate-ota-html-mojo.html">generate-ota-html mojo</a>)
	in the settings.xml, the pom.xml or as Java system property. 
	E.g. <tt>-Dmios.ota-service.url=http://myserver:8080/ota-service/HTML</tt>
	</p>
	
	<p>
	In our case we use a <a href="http://hudson-ci.org/">Hudson</a> CI server to build our Xcode Apps. The generated IPA file and 'iframe page' are archived for each build and are accessible via http.<br/>
	Testers can navigate to the build results, open the 'iframe page' and click the install link to install the IPA file of this build.
	</p>

	<p><img class="screenshot" width="200" height="150" src="ota/EnableOTADeployment-hudson.jpg"
		title="Hudson CI server providing IPA and OTA 'iframe page' for each build"/></p>
	
	<p>
	Since the artifacts are deployed to a central Maven repository it is also possible to find the 'iframe page' ("-ota.htm") artifact in Nexus, open it and install the IPA from the Maven repository.<br/>
	It is even possible to copy the IPA and 'iframe page' to another server (e.g. an internal "App Catalog") - OTA Service always makes sure the IPA is installed from the location next to the 'iframe page'.
	</p>

	<p><img class="screenshot" width="200" height="150" src="ota/EnableOTADeployment-installerPage.jpg" 
		title="Opened 'iframe page' with 'install page' content generate by the OTA Service. Clicking the 'Install Over-The-Air' button will install the App." /></p>

	<br/>
	<br/>
	<br/>

	<h2>Hosting an OTA Service</h2>
	
	<p>
	Hosting an an OTA service is easy. All you need is a Java servlet engine (like <a href="http://tomcat.apache.org/">Apache Tomcat</a>) where you deploy the ota-service.war file:
	<ul>
	  <li>Install Tomcat</li>
	  <li>Clone the <a href="http://github.com/sap-production/OTAService">OTA-Service project</a> and build it</li>. Or directly download the latest released war file from <a href="http://search.maven.org/#search|ga|1|a%3A%22com.sap.prd.mobile.ios.ota.webapp%22">Maven Central</a>.
	  <li>Copy the <tt>ota-service.war</tt> file from the target folder to the Tomcat/webapps folder and restart Tomcat</li>
	  <li>Use the OTA-Service by specifying the <tt>mios.ota-service.url</tt> in the <tt>xcode-maven-build</tt> as described above (don't forget the <tt>/HTML</tt> - e.g. <tt>-Dmios.ota-service.url=http://myserver:8080/ota-service/HTML</tt>)</li>
	</ul>	
	</p>
	
	<p class="info">The <a href="http://github.com/sap-production/OTAService#configuration-in-tomcat">OTA Service Documentation</a> describes how to configure custom HTML templates.</p>

	<h3>Hosting OTA Service on Cloudbees</h3>
	
	<p>If you don't want to host an OTA Service on you own - here is an example how to host an OTA Service on <a href="http://www.cloudbees.com">Cloudbees</a> in 5-10 minutes.</p>
	
	<p>After registering a free Cloudbees Account you have to subscribe to some additional free services. Click <a href="http://grandcentral.cloudbees.com/subscriptions"><tt>Browse Ecosystem</tt></a>.<br/>
	<img class="screenshot" width="200" height="150" src="ota/cloudbees_overview.jpg" 
		title="Cloudbees Overview Page - Click 'Browse Ecosystem' to add additional services" /></p>

	<p>Subscribe to the free Jenkins DEV@cloud service<br/>
	<img class="screenshot" width="200" height="150" src="ota/cloudbees_jenkins1.jpg" 
		title="Jenkins DEV@cloud service subscription model - free is enough" /></p>
		
	<p>Click on <tt>Builds</tt> to access your Jenkins. Click on <tt>New Job</tt> to add a new job.<br/>
	<img class="screenshot" width="200" height="150" src="ota/cloudbees_jenkins.jpg" 
		title="Jenkins overview - add a job" /></p>

	<p>Give it a name and select <tt>Build a maven2/3 project</tt>.<br/>
	<img class="screenshot" width="200" height="150" src="ota/cloudbees_jenkins2.jpg" 
		title="Job configuration - create a 'Build a maven2/3 project'" /></p>

	<p valign="top">	
	As Git repository specify <tt>http://github.com/sap-production/OTAService.git</tt> and specify <tt>clean install</tt> as Maven build goals.<br/>
    As Post-build Action add <tt>Deploy applications</tt>, specify a new application ID and the group- and artifact Id of the OTA Service webapp(<i>com.sap.prd.mobile.ios.ota</i> : <i>com.sap.prd.mobile.ios.ota.webapp</i>).<br/>
	<table width="1px"><tr><td valign="top">
	<img class="screenshot" width="200" height="150" src="ota/cloudbees_jenkins3a.jpg" 
		title="Git SCM configuration - fetch the OTA service sources" />
	</td><td valign="top">
	<img class="screenshot" width="200" height="150" src="ota/cloudbees_jenkins3b.jpg" 
		title="Maven build configuration" />
	</td><td valign="top">
	<img class="screenshot" width="200" height="150" src="ota/cloudbees_jenkins3c.jpg" 
		title="Application Deployment configuration" />
	</td></tr></table>
	</p>

	<p>Save your job and trigger your first build.<br/>
	<img class="screenshot" width="200" height="150" src="ota/cloudbees_jenkins4.jpg" 
		title="Job created - successfully built" /></p>

	<p>In the console log you should see that the application was has been deployed to your Cloudbees application server.<br/>
	<tt>[cloudbees-deployer] Deployed to application id youraccount/otaservice</tt><br/>
	<tt>[cloudbees-deployer] Can be accessed at http://otaservice.youraccount.us.cloudbees.net</tt>
	</p>
	
	<p>You can test the OTA service by adding <tt>/HTML</tt> to the URL. It should display <tt>HTTP Status 400 - Referer required</tt> (since it only works from the HTML page generated during the xcode-maven-build).<br/>
	<img class="screenshot" width="200" height="150" src="ota/cloudbees_jenkins5.jpg" 
		title="Testing the OTA Service - 400 'Referer required' is good" /></p>

	<p class="info">Since it is not easily possible to configure the web application when it is running on Cloudbees we recommend to fork the OTA-Service project and customize the HTML template located in <code>/modules/ota-library/src/main/resources/template.html</code>.</p>
		
</body>
</html>